FACT ID: F000001
	Vector position -> displayed tile map is defined by the definition matrix
		[x]  [ 32      32 ]
		[y]  [ 16     -16 ]
	Multiplied by the scale factor

FACT ID: F000002
	If a square is overlayed on the window like shown in R000001, the number of tiles that fit vertically is also the number of tiles that
	fit in the legs of the triangle offscreen.

FACT ID: F000003 ref F000002
	The addition of the number of tiles that fit X and the number of tiles that fit Y is the side length of the overlayed square

COMMENT ID: C000001

    	for loop
	Purpose: Iterate through the x coordinate of tiles that will be shown onscreen
		Goes from the bottom left edge of the overlayed square to the top right edge of the overlayed square
			(Technical -> Iterate through a vector of vectors of Basetile's)

	Start: Whichever is higher: 	0;
				((m_main_camera.getX()/64 - m_main_camera.getY()/32)/m_scale_level
				- m_y_tiles_fit_screen - OFFSET FROM TILE HEIGHT) (TODO)

				First being 
					the lowest allowed vector position

				Second being 
					the x solution to the inverse definition matrix
					see F000001
						[x]  [ 1/64  1/32 ]
						[y]  [ 1/64 -1/32 ]
					minus the number of tiles that fit screen in y (see F000002)
					minus offset from tile (TODO)
	End: Whichever is lower:	xsize
				((m_main_camera.getX()/64 - m_main_camera.getY()/32)/m_scale_level
				+ m_x_tiles_fit_screen)

				First being
					the highest allowed vector position

				Second being
					the x solution to the inverse definition matrix
					see ABOVE
					+ the number of tiles that fit screen in x (see F000002)

COMMENT ID: C000002

  	for loop
	Purpose: Iterate through the y coordinate of tiles that will be shown onscreen
		Goes from the top left edge of the overlayed square to the bottom right edge of the overlayed square
			(Technical -> vector of Basetile's)

	Start: Whichever is higher: 	0;
				((m_main_camera.getX()/64 + m_main_camera.getY()/32)/m_scale_level)

				First being 
					the lowest allowed vector position

				Second being 
					the y solution to the inverse definition matrix
					see F000001
						[x]  [ 1/64  1/32 ]
						[y]  [ 1/64 -1/32 ]
					SINCE: Corner of camera is already on the top left edge
	End: Whichever is lower:	ysize
				((m_main_camera.getX()/64 - m_main_camera.getY()/32)/m_scale_level
				+ m_x_tiles_fit_screen + m_y_tiles_fit_screen)

				First being
					the highest allowed vector position

				Second being
					the x solution to the inverse definition matrix
					see ABOVE
					+ the number of tiles that fit screen in x (see F000002)
					+ the number of tiles that fit screen in y (see F000002)
					SINCE: (see F000003)

RESOURCE ID: R000001

	The drawn tiles are the overlayed square as shown
                                                               /\
                                                       /                \
                                               /                                \
                                     _/________________________\_
                                    /|                                                     |\
                                 /   |                                                     |   \
                              /      |                                                     |      \
                              \      |                                                     |      /
                                 \   |                                                     |   /
                                    \|__________________________ |/
                                       \                                                /
                                               \                                /
                                                       \                /
                                                               \/